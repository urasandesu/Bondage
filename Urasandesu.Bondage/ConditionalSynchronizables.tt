<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#@ include file="ConditionalSynchronizationTemplate.t4"#>
<#
/* 
 * File: ConditionalSynchronizables.tt
 * 
 * Author: Akira Sugiura (urasandesu@gmail.com)
 * 
 * 
 * Copyright (c) 2017 Akira Sugiura
 *  
 *  This software is MIT License.
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
#>
/* 
 * File: ConditionalSynchronizables.g.cs
 * 
 * Author: Akira Sugiura (urasandesu@gmail.com)
 * 
 * 
 * Copyright (c) 2017 Akira Sugiura
 *  
 *  This software is MIT License.
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */



using Microsoft.PSharp;
using Microsoft.PSharp.Utilities;
using System;
using Urasandesu.Bondage.Internals;
using Urasandesu.Bondage.Mixins.Microsoft.PSharp;
using Urasandesu.Bondage.Mixins.Microsoft.PSharp.IO;
using Urasandesu.Enkidu;

namespace Urasandesu.Bondage
{
<#
foreach (var template in templates)
{
#>
<#
    foreach (var syncTemplate in template.SynchronizationTemplates)
    {
#>
    public class <#= syncTemplate.Synchronizable #> : <#= syncTemplate.SynchronizableBaseType #>
    {
        public <#= syncTemplate.Synchronizable #>(<#= template.PredicateType #> willHandle,
            HandledCallback begun = null, HandledCallback ended = null, AllNotifiedCallback allNotified = null) :
            base(ToPredicate(willHandle), begun, ended, allNotified)
        { }

        static Predicate<object> ToPredicate(<#= template.PredicateType #> willHandle)
        {
            return new Predicate<object>(obj =>
            {
                var tuple = default(<#= template.GetTupleType() #>);
                if ((tuple = obj as <#= template.GetTupleType() #>) == null)
                    return false;

<#
        if (syncTemplate.IsSet)
        {
#>
                if (ConditionalSynchronizableHelper.IsEveryTimeThroughSet(tuple))
                    return false;

<#
        }
#>
<#
        for (var i = 0; i < template.ParameterTemplates.Length; i++)
        {
            var paramTemplate = template.ParameterTemplates[i];
            var tuplePropName = template.GetTuplePropertyName(i);
#>
                var <#= paramTemplate.Name #> = tuple.<#= tuplePropName #>;
<#
        }
#>
                if (type != typeof(<#= template.HandlerType #>))
                    return false;

                return willHandle == null || willHandle.Invoke(<#= template.GetHandlerInvocationParameters() #>);
            });
        }

        protected override EventSynchronizer GetEventSynchronizer(SynchronousId id, Predicate<object> willHandle, 
            HandledCallback begun = null, HandledCallback ended = null, AllNotifiedCallback allNotified = null)
        {
            return new <#= syncTemplate.Synchronizer #>(id, willHandle, begun, ended, allNotified);
        }
    }

<#
    }
#>
<#
}
#>
}
